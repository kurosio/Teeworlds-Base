name: Build

on:
  push:
    branches-ignore:
      - staging.tmp
      - trying.tmp
      - staging-squash-merge.tmp
  pull_request:

jobs:
  build-cmake:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, ubuntu-20.04]
        include:
        - os: ubuntu-latest
          cmake-args: -G Ninja
          package-file: "*-linux_x86_64.tar.xz"
          fancy: true
          env:
            CFLAGS: -Wdeclaration-after-statement -Werror
            CXXFLAGS: -Werror
        - os: ubuntu-20.04
          cmake-path: /usr/bin/
          cmake-args: -G Ninja -DTEST_MYSQL=ON
          package-file: "*-linux_x86_64.tar.xz"
          fancy: false
          env:
            CFLAGS: -Wdeclaration-after-statement -Werror
            CXXFLAGS: -Werror
            GTEST_FILTER: -*SQLite*
        - name: "Windows-latest x64"
          os: windows-latest
          cmake-args: -A x64
          package-file: "*-win64.zip"
          fancy: false
          env:
            CFLAGS: /WX
            CXXFLAGS: /WX
            LDFLAGS: /WX

    steps:
    - uses: jakoch/install-vulkan-sdk-action@main
      name: Install Vulkan SDK
      with:
        version: 1.3.224.1
        
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Prepare Linux
      if: contains(matrix.os, 'ubuntu')
      run: |
        sudo apt-get update -y
        sudo apt-get upgrade -y
        sudo apt-get install pkg-config cmake ninja-build libmysqlcppconn-dev libfreetype6-dev libnotify-dev libsdl2-dev libsqlite3-dev libvulkan-dev glslang-tools spirv-tools libavcodec-dev libavformat-dev libavutil-dev libswresample-dev libswscale-dev libx264-dev libpng-dev valgrind -y
    - name: Build in debug mode
      env: ${{ matrix.env }}
      run: |
        mkdir debug
        cd debug
        ${{ matrix.cmake-path }}cmake --version
        ${{ matrix.cmake-path }}cmake ${{ matrix.cmake-args }} -DCMAKE_BUILD_TYPE=Debug -Werror=dev -DDOWNLOAD_GTEST=ON -DDEV=ON -DCMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG=. ..
        ${{ matrix.cmake-path }}cmake --build . --config Debug --target everything ${{ matrix.build-args }}
    - name: Test debug
      env: ${{ matrix.env }}
      run: |
        cd debug
        ${{ matrix.cmake-path }}cmake --build . --config Debug --target run_tests ${{ matrix.build-args }}
    - name: Run debug server
      env: ${{ matrix.env }}
      run: |
        cd debug
        ./DDNet-Server shutdown
    - name: Build in release mode
      env: ${{ matrix.env }}
      run: |
        mkdir release
        cd release
        ${{ matrix.cmake-path }}cmake ${{ matrix.cmake-args }} -DCMAKE_BUILD_TYPE=Release -Werror=dev -DDOWNLOAD_GTEST=ON -DCMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE=. ..
        ${{ matrix.cmake-path }}cmake --build . --config Release --target everything ${{ matrix.build-args }}
    - name: Test release
      env: ${{ matrix.env }}
      run: |
        cd release
        ${{ matrix.cmake-path }}cmake --build . --config Release --target run_tests ${{ matrix.build-args }}
    - name: Run release server
      env: ${{ matrix.env }}
      run: |
        cd release
        ./DDNet-Server shutdown
    - name: Package
      run: |
        cd release
        ${{ matrix.cmake-path }}cmake --build . --config Release --target package_default ${{ matrix.build-args }}
        mkdir artifacts
        mv ${{ matrix.package-file }} artifacts
    - name: Upload Artifacts
      uses: actions/upload-artifact@v1
      with:
        name: toutuo-${{ matrix.os }}
        path: release/artifacts
